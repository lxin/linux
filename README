QUIC in Linux Kernel
====================

This branch implements TLS Handshake Protocol(RFC8446#section-4) and
QUIC(RFC9000 and RFC9001) in kernel, currently it's implemented:

  1. Basic handshakes with Certificate and PSK supported.
  2. Data reliable sending and receiving.
  3. Stream state management.
  4. Multiple connection ids and connection migration.
  5. Stream and connection flow control.

All QUIC Frames can be created/processed now, and the Crypto Algorithms
supported are:

  HKDF extract/expand: hmac(sha256)
  Header Protection: ecb(aes)
  ECDH key exchange: secp256r1(0x0017)
  Certificate: rsa_pkcs1_sha256(0x0401)/rsa_pss_rsae_sha256(0x0804)
  Signature Algorithm: rsa_pss_rsae_sha256(0x0804)
  AEAD: TLS_AES_128_GCM_SHA256(0x1301)

Certificates can be set on both client and server sides.

It is mostly to add files:

  - crypto/tls_hs.c
  - include/crypto/tls_hs.h
  - net/quic/*
  - include/net/quic/quic.h
  - include/uapi/linux/quic.h
  - tools/testing/selftests/net/quic/

This patchset requires the feature described in:

  https://lwn.net/Articles/853572/

and one follow-up I added in this patchset;

  crypto: rsa-psspad: Provide PSS signature verify operation

How to Use It
=============

  After building and installing the kernel with:

    CONFIG_IP_QUIC=m

  It will work as a transport protocol in kernel, the APIs for users
  are exactly like TCP/UDP/SCTP. For socket options and notifications
  please check include/uapi/linux/quic.h. Note that the notifications
  for stream, connection and address changes work similar as SCTP's.

  You can run the hello world example test with certificate simply by:

    # cd tools/testing/selftests/net/quic/
    # sh server.sh
    # sh client.sh

  or for the stream, connection and address changes notifications
  example test by:

    # cd tools/testing/selftests/net/quic/
    # sh server_notify.sh
    # sh client_notify.sh

  or for hello world example test with PSK by:

    # cd tools/testing/selftests/net/quic/
    # sh server_psk.sh
    # sh client_psk.sh
    (new psk file can be created by gen_psk)

  or for early data transmission example test by:

    # cd tools/testing/selftests/net/quic/
    # sh server_early.sh
    # sh client_early.sh

  or for certificate chain example test by:

    # cd tools/testing/selftests/net/quic/
    # sh server_certs.sh
    # sh client_certs.sh
    (new cert chian and ca files can be create by gen_certs.sh)

  or for key update example test by:

    # cd tools/testing/selftests/net/quic/
    # sh server_keys.sh
    # sh client_keys.sh

  or for token/retry example test by:

    # cd tools/testing/selftests/net/quic/
    # sh server_token.sh
    # sh client_token.sh

  or for client certificate example test by:

    # cd tools/testing/selftests/net/quic/
    # sh server_ccert.sh
    # sh client_ccert.sh

  and it can also interact with ngtcp2, after building ngtcp2:

    # cd ngtcp2/examples/
    # ./server 127.0.0.1 1234 ./pkey.pem ./cert.pem -s
      (pkey.pem and cert.pem are
          in tools/testing/selftests/net/quic/ss_cert/)
    # cd tools/testing/selftests/net/quic/
    # sh client.sh

    # cd tools/testing/selftests/net/quic/
    # sh server.sh
    # cd ngtcp2/examples/
    # ./client 127.0.0.1 1234 -s --groups="P-256"

TODO
====

  - Protocol:
    * Add ICMP(v6) TooBig/FragNeeded Prcess and PLPMTUD.
    * Add more socket options and send/recv parameters.

  - Handshake:
    * Adjust code to support more crypto algorithms.
    * Process more TLS 1.3 messages and extensions.

  - Congestion Control:
    * https://datatracker.ietf.org/doc/html/rfc9002
